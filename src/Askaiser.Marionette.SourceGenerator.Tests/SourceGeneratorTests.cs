using System;
using System.Globalization;
using Microsoft.CodeAnalysis;
using Xunit;

namespace Askaiser.Marionette.SourceGenerator.Tests;

public class SourceGeneratorTests : BaseSourceGeneratorTest
{
    private static readonly string AssemblyVersion = typeof(SourceGeneratorTests).Assembly.GetName().Version?.ToString() ?? "1.0.0.0";

    [Fact]
    public void NoSourceCode_GeneratesNothing()
    {
        var result = this.Compile(string.Empty);

        Assert.Empty(result.Diagnostics);
        Assert.Empty(result.SourceFiles);
    }

    [Fact]
    public void PartialClassWithoutAttribute_GeneratesNothing()
    {
        const string userSource = @"
namespace MyCode
{
    public partial class MyLibrary { }
}";

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);
        Assert.Empty(result.SourceFiles);
    }

    [Fact]
    public void NotPartialClassWithAttribute_GeneratesNothing()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""ignored"")]
    public class MyLibrary { }
}";

        var result = this.Compile(userSource);

        var warning = Assert.Single(result.Diagnostics);
        Assert.NotNull(warning);
        Assert.Equal(DiagnosticSeverity.Warning, warning.Severity);
        Assert.Equal(DiagnosticsDescriptors.MissingPartialModifier.Id, warning.Id);
        Assert.Empty(result.SourceFiles);
    }

    [Fact]
    public void WhenNullImageLibraryPath_GeneratesNothing()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(null)]
    public partial class MyLibrary { }
}";

        var result = this.Compile(userSource);

        var warning = Assert.Single(result.Diagnostics);
        Assert.NotNull(warning);
        Assert.Equal(DiagnosticSeverity.Warning, warning.Severity);
        Assert.Equal(DiagnosticsDescriptors.InvalidDirectoryPath.Id, warning.Id);

        Assert.Empty(result.SourceFiles);
    }

    [Fact]
    public void WhenEmptyImageLibraryPath_GeneratesNothing()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary("""")]
    public partial class MyLibrary { }
}";

        var result = this.Compile(userSource);

        var warning = Assert.Single(result.Diagnostics);
        Assert.NotNull(warning);
        Assert.Equal(DiagnosticSeverity.Warning, warning.Severity);
        Assert.Equal(DiagnosticsDescriptors.InvalidDirectoryPath.Id, warning.Id);

        Assert.Empty(result.SourceFiles);
    }

    [Fact]
    public void WhenNoImagesInCurrentDirectory_GeneratesEmptyLibrary()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }
}";

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenReferencedEmptyImage_GeneratesEmptyLibrary_AndDoesNotCompile()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }

    public class MyClass
    {
        public void DoSomething()
        {
            var library = new MyLibrary();
            var logo = library.Logo;
        }
    }
}";

        this.FileSystem.SetFileBytes("./logo.png", Array.Empty<byte>());

        var result = this.Compile(userSource);

        var error = Assert.Single(result.Diagnostics);
        Assert.NotNull(error);
        Assert.Equal("CS1061", error.Id);
        Assert.Equal(DiagnosticSeverity.Error, error.Severity);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenNotAnImageInCurrentDirectory_GeneratesEmptyLibrary()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }
}";

        this.FileSystem.SetFileBytes("./readme.md", new byte[] { 0 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenSingleImageInCurrentDirectory_GeneratesLibrary()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }

    public class MyClass
    {
        public void DoSomething()
        {
            var library = new MyLibrary();
            var logo = library.Logo;
        }
    }
}";

        this.FileSystem.SetFileBytes("./logo.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Logo => this._elements[""Root.Logo.0""];

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Logo.0"", ""AQID"", 0.95m, false));
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenSingleImageWithoutNamespace_GeneratesLibrary()
    {
        const string userSource = @"
[Askaiser.Marionette.ImageLibrary(""."")]
public partial class MyLibrary { }";

        this.FileSystem.SetFileBytes("./logo.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

public partial class MyLibrary
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    private readonly global::Askaiser.Marionette.ElementCollection _elements;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    public static MyLibrary Instance
    {
        get { return _lazy.Value; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    public MyLibrary()
    {
        this._elements = new global::Askaiser.Marionette.ElementCollection();
        this.CreateElements();
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    public global::Askaiser.Marionette.IElement Logo => this._elements[""Root.Logo.0""];

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    private void CreateElements()
    {
        this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Logo.0"", ""AQID"", 0.95m, false));
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenSingleImageWithoutLongNamespace_GeneratesLibrary()
    {
        const string userSource = @"
namespace A.B.C.D.E.F
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }

    public class MyClass
    {
        public void DoSomething()
        {
            var library = new MyLibrary();
            var logo = library.Logo;
        }
    }
}";

        this.FileSystem.SetFileBytes("./logo.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("A.B.C.D.E.F.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace A.B.C.D.E.F
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Logo => this._elements[""Root.Logo.0""];

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Logo.0"", ""AQID"", 0.95m, false));
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenMultipleImagesInCurrentDirectory_GeneratesLibrary()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }
}";

        this.FileSystem.SetFileBytes("./logo.png", new byte[] { 1, 2, 3 });
        this.FileSystem.SetFileBytes("./sidebar.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Logo => this._elements[""Root.Logo.0""];

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Sidebar => this._elements[""Root.Sidebar.0""];

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Logo.0"", ""AQID"", 0.95m, false));
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Sidebar.0"", ""AQID"", 0.95m, false));
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenMultipleImagesInDifferentDirectories_GeneratesLibrary()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }
}";

        this.FileSystem.SetFileBytes("./foo/logo-large.png", new byte[] { 1, 2, 3 });
        this.FileSystem.SetFileBytes("./bar/sidebar.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.Bar = new RootBarLibrary(this._elements);
            this.Foo = new RootFooLibrary(this._elements);

            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootBarLibrary Bar { get; }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooLibrary Foo { get; }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Bar.Sidebar.0"", ""AQID"", 0.95m, false));
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Foo.LogoLarge.0"", ""AQID"", 0.95m, false));
        }
    }

    public partial class RootBarLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootBarLibrary(global::Askaiser.Marionette.ElementCollection elements)
        {
            this._elements = elements;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Sidebar => this._elements[""Root.Bar.Sidebar.0""];
    }

    public partial class RootFooLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooLibrary(global::Askaiser.Marionette.ElementCollection elements)
        {
            this._elements = elements;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement LogoLarge => this._elements[""Root.Foo.LogoLarge.0""];
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenMultipleImagesWithSuffixes_GeneratesLibrary()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }
}";

        this.FileSystem.SetFileBytes("./logo_0.85_0.png", new byte[] { 1, 2, 3 });
        this.FileSystem.SetFileBytes("./logo_gs_0.78_1.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement[] Logo => new[]
        {
            this._elements[""Root.Logo.0""],
            this._elements[""Root.Logo.1""]
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Logo.0"", ""AQID"", 0.85m, false));
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Logo.1"", ""AQID"", 0.78m, true));
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenSingleImageAndMultipleEmptyDirectories_GeneratesLibraryWithSingleImage()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }
}";

        this.FileSystem.SetFileBytes("./foo/logo.png", new byte[] { 1, 2, 3 });
        this.FileSystem.AddEntry("./foo/bar");
        this.FileSystem.AddEntry("./foo/qux/baz");
        this.FileSystem.AddEntry("./empty");

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.Foo = new RootFooLibrary(this._elements);

            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooLibrary Foo { get; }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Foo.Logo.0"", ""AQID"", 0.95m, false));
        }
    }

    public partial class RootFooLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooLibrary(global::Askaiser.Marionette.ElementCollection elements)
        {
            this._elements = elements;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Logo => this._elements[""Root.Foo.Logo.0""];
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenMultipleImagesWithDoubleCarets_GeneratesLibrary()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""."")]
    public partial class MyLibrary { }
}";

        this.FileSystem.SetFileBytes("./foo--bar--logo.png", new byte[] { 1, 2, 3 });
        this.FileSystem.SetFileBytes("./qux--baz--title.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.Foo = new RootFooLibrary(this._elements);
            this.Qux = new RootQuxLibrary(this._elements);

            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooLibrary Foo { get; }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootQuxLibrary Qux { get; }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Foo.Bar.Logo.0"", ""AQID"", 0.95m, false));
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Qux.Baz.Title.0"", ""AQID"", 0.95m, false));
        }
    }

    public partial class RootFooLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooLibrary(global::Askaiser.Marionette.ElementCollection elements)
        {
            this._elements = elements;
            this.Bar = new RootFooBarLibrary(this._elements);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooBarLibrary Bar { get; }
    }

    public partial class RootFooBarLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootFooBarLibrary(global::Askaiser.Marionette.ElementCollection elements)
        {
            this._elements = elements;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Logo => this._elements[""Root.Foo.Bar.Logo.0""];
    }

    public partial class RootQuxLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootQuxLibrary(global::Askaiser.Marionette.ElementCollection elements)
        {
            this._elements = elements;
            this.Baz = new RootQuxBazLibrary(this._elements);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootQuxBazLibrary Baz { get; }
    }

    public partial class RootQuxBazLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public RootQuxBazLibrary(global::Askaiser.Marionette.ElementCollection elements)
        {
            this._elements = elements;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Title => this._elements[""Root.Qux.Baz.Title.0""];
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenDuplicateImageIndexes_AddsDiagnostic()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""C:\\"")]
    public partial class MyLibrary { }
}";

        this.FileSystem.SetFileBytes("C:\\foo_0.99_gs_0.png", new byte[] { 1, 2, 3 });
        this.FileSystem.SetFileBytes("C:\\foo_0.80_0.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        var warning = Assert.Single(result.Diagnostics);
        Assert.NotNull(warning);
        Assert.Equal(DiagnosticSeverity.Warning, warning.Severity);
        Assert.Equal(DiagnosticsDescriptors.DuplicateImageName.Id, warning.Id);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: C:\
// <auto-generated/>
#nullable enable

namespace MyCode
{
    public partial class MyLibrary
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {
            get { return _lazy.Value; }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Foo => this._elements[""Root.Foo.0""];

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Foo.0"", ""AQID"", 0.99m, true));
        }
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenFileTooLarge_AddsDiagnostic()
    {
        const string userSource = @"
[Askaiser.Marionette.ImageLibrary(""."")]
public partial class MyLibrary { }";

        this.FileSystem.SetFileBytes("./logo.png", new byte[Constants.DefaultMaxImageSize + 1]);

        var result = this.Compile(userSource);

        var warning = Assert.Single(result.Diagnostics);
        Assert.NotNull(warning);
        Assert.Equal(DiagnosticSeverity.Warning, warning.Severity);
        Assert.Equal(DiagnosticsDescriptors.FileTooLarge.Id, warning.Id);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyLibrary.images.cs", sourceFile.Filename);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

public partial class MyLibrary
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    private readonly global::Askaiser.Marionette.ElementCollection _elements;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    public static MyLibrary Instance
    {
        get { return _lazy.Value; }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    public MyLibrary()
    {
        this._elements = new global::Askaiser.Marionette.ElementCollection();
        this.CreateElements();
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
    private void CreateElements()
    {
    }
}
";
        Assert.Equal(expectedSource, sourceFile.Code);
    }

    [Fact]
    public void WhenMultipleLibraries_GeneratesMultipleLibraries()
    {
        const string userSource = @"
namespace MyCode
{
    [Askaiser.Marionette.ImageLibrary(""foo"")]
    public partial class FooLibrary { }

    [Askaiser.Marionette.ImageLibrary(""bar"")]
    public partial class BarLibrary { }
}";

        this.FileSystem.SetFileBytes("foo/logo.png", new byte[] { 1, 2, 3 });
        this.FileSystem.SetFileBytes("bar/title.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        Assert.Equal(2, result.SourceFiles.Count);

        var fooSourceFile = Assert.Single(result.SourceFiles, x => x.Filename == "MyCode.FooLibrary.images.cs");
        var barSourceFile = Assert.Single(result.SourceFiles, x => x.Filename == "MyCode.BarLibrary.images.cs");

        Assert.NotNull(fooSourceFile);
        Assert.NotNull(barSourceFile);

        var expectedSource =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: {0}
// <auto-generated/>
#nullable enable

namespace MyCode
{{
    public partial class {1}Library
    {{
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<{1}Library> _lazy = new global::System.Lazy<{1}Library>(() => new {1}Library());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static {1}Library Instance
        {{
            get {{ return _lazy.Value; }}
        }}

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public {1}Library()
        {{
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }}

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement {2} => this._elements[""Root.{2}.0""];

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {{
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.{2}.0"", ""AQID"", 0.95m, false));
        }}
    }}
}}
";
        Assert.Equal(string.Format(CultureInfo.InvariantCulture, expectedSource, "foo", "Foo", "Logo"), fooSourceFile.Code);
        Assert.Equal(string.Format(CultureInfo.InvariantCulture, expectedSource, "bar", "Bar", "Title"), barSourceFile.Code);
    }

    [Fact]
    public void WhenNestedClass_AddsDiagnostic()
    {
        const string userSource = @"
namespace MyCode
{
    public class ParentClass
    {
        [Askaiser.Marionette.ImageLibrary(""foo"")]
        public partial class FooLibrary { }
    }
}";

        this.FileSystem.SetFileBytes("foo/logo.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        var warning = Assert.Single(result.Diagnostics);

        Assert.NotNull(warning);
        Assert.Equal(DiagnosticSeverity.Warning, warning.Severity);
        Assert.Equal(DiagnosticsDescriptors.NestedClassNotAllowed.Id, warning.Id);
        Assert.Empty(result.SourceFiles);
    }

    [Theory]
    [InlineData("partial")]
    [InlineData("public partial")]
    [InlineData("internal partial")]
    public void WhenMultipleMultipliers_Works(string modifiers)
    {
        const string userSourceFormat = @"
namespace MyCode
{{
    [Askaiser.Marionette.ImageLibrary(""."")]
    {0} class MyLibrary {{ }}

    public class MyClass
    {{
        public void DoSomething()
        {{
            var library = new MyLibrary();
            var logo = library.Logo;
        }}
    }}
}}";

        var userSource = string.Format(CultureInfo.InvariantCulture, userSourceFormat, modifiers);
        this.FileSystem.SetFileBytes("./logo.png", new byte[] { 1, 2, 3 });

        var result = this.Compile(userSource);

        Assert.Empty(result.Diagnostics);

        var sourceFile = Assert.Single(result.SourceFiles);
        Assert.NotNull(sourceFile);
        Assert.Equal("MyCode.MyLibrary.images.cs", sourceFile.Filename);

        var expectedSourceFormat =
            @"// Code generated at 2021-01-01T00:00:00.0000000
// From directory: .
// <auto-generated/>
#nullable enable

namespace MyCode
{{
    {0} class MyLibrary
    {{
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private readonly global::Askaiser.Marionette.ElementCollection _elements;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private static readonly global::System.Lazy<MyLibrary> _lazy = new global::System.Lazy<MyLibrary>(() => new MyLibrary());

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public static MyLibrary Instance
        {{
            get {{ return _lazy.Value; }}
        }}

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public MyLibrary()
        {{
            this._elements = new global::Askaiser.Marionette.ElementCollection();
            this.CreateElements();
        }}

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        public global::Askaiser.Marionette.IElement Logo => this._elements[""Root.Logo.0""];

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Askaiser.Marionette.SourceGenerator"", """ + AssemblyVersion + @""")]
        private void CreateElements()
        {{
            this._elements.Add(new global::Askaiser.Marionette.ImageElement(""Root.Logo.0"", ""AQID"", 0.95m, false));
        }}
    }}
}}
";
        var expectedSource = string.Format(CultureInfo.InvariantCulture, expectedSourceFormat, modifiers);
        Assert.Equal(expectedSource, sourceFile.Code);
    }
}
